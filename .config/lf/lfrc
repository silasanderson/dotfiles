set ratios 1:2:3
set cleaner ~/.config/lf/cleaner
# Basic Settings
set hidden
# set drawbox
set shell zsh
set shellopts '-eu'
set ifs "\n"
set scrolloff 10
set period 1
# set icons true
set previewer pistol
set ignorecase true
set relativenumber
set dircounts

# set sortby name

# Custom Functions

# cmd kill $killall lf
# map Q kill
# map Q &lf -remote 'send quit'; lf -remote 'quit'

# cmd wq quit

cmd browser $($BROWSER $f)

# cmd sxiv $f | xclip -o

cmd open ${{
    case $(file --mime-type $f -b) in
	# text/html) $BROWSER $fx;;
	image/vnd.djvu|application/pdf|application/octet-stream) setsid -f zathura $fx >/dev/null 2>&1 ;;
	text/csv) sc-im $f;;
	text/*) $EDITOR $f;;
	image/gif) mpv --loop-file=inf $fx ;;
	image/x-xcf) setsid -f gimp $f >/dev/null 2>&1 ;;
	image/svg+xml) display -- $f ;;
	# image/*) rotdir $f | grep -i "\.\(png\|jpg\|jpeg\|gif\|webp\|tif\|ico\)\(_large\)*$" | sxiv -aio 2>/dev/null | lf-select ;;
	image/*) sxiv $fx ;;
	audio/*) mpv --audio-display=no $f ;;
	# video/*) setsid -f mpv $f -quiet >/dev/null 2>&1 ;;
	video/*) mpv $f -quiet >/dev/null 2>&1 ;;
	application/pdf|application/vnd*|application/epub*) setsid -f zathura $fx >/dev/null 2>&1 ;;
	application/vnd.openxmlformats-officedocument.wordprocessingml.document) docx2txt $fx - | nvim ;;
        *) for f in $fx; do setsid -f $OPENER $f >/dev/null 2>&1; done;;
    esac
}}

cmd yank-lines ${{
echo $fx | xclip 
}}

cmd mkscript ${{
  printf "script name: "
  read ans
  touch $ans
	echo "#!/bin/sh"|cat - $ans > /tmp/out && mv /tmp/out $ans
	chmod +x $ans
	$EDITOR $ans
}}

cmd mkdir ${{
  printf "Directory Name: "
  read ans
  mkdir $ans
}}

cmd mkfile ${{
  printf "File Name: "
  read ans
  $EDITOR $ans
}}

cmd chmod ${{
  printf "Mode Bits: "
  read ans

  for file in "$fx"
  do
    chmod $ans $file
  done

  lf -remote 'send reload'
}}

cmd sudomkfile ${{
  printf "File Name: "
  read ans
  sudo $EDITOR $ans
}}

cmd setwallpaper $setbg "$f" &

cmd fzf_jump ${{
  res="$(find . -maxdepth 3 | fzf --reverse --header='Jump to location')"
  if [ -f "$res" ]; then
    cmd="select"
  elif [ -d "$res" ]; then
    cmd="cd"
  fi
  lf -remote "send $id $cmd \"$res\""
}}

cmd broot_jump ${{
  f=$(mktemp)
  res="$(broot --outcmd $f && cat $f | sed 's/cd //')"
  rm -f "$f"
  if [ -f "$res" ]; then
    cmd="select"
  elif [ -d "$res" ]; then
    cmd="cd"
  fi
  lf -remote "send $id $cmd \"$res\""
}}

cmd open_config  ${{
  $EDITOR $(bookmenu -b ~/.config/bookmenu/configs -f fzf -o)
}}

cmd dragon %dragon-drag-and-drop -a -x $fx
cmd dragon-stay %dragon-drag-and-drop -a $fx
cmd dragon-individual %dragon-drag-and-drop $fx
cmd cpdragon %cpdragon
cmd mvdragon %mvdragon
cmd dlfile %dlfile
 
 cmd unarchive ${{
    set -f
    case $f in
        *.tar) tar -xf $f;;
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
        *.bz2) bzip2 --decompress $f;;
        *.zst) zstd -d $f;;
    esac
}}

# # Archive bindings
# cmd unarchive ${{
 #  case "$f" in
 #      *.zip) unzip "$f" "$f" ;;
 #      *.tar.gz) tar -xzvf "$f" "$f" ;;
 #      *.tar.bz2) tar -xjvf "$f" "$f" ;;
 #      *.tar) tar -xvf "$f" "$f" ;;
 #      *) echo "Unsupported format" ;;
 #  esac
# }}

# cmd restor chmod 644

cmd zip %zip -r "$f" "$f"
cmd tar %tar cvf "$f.tar" "$f"
cmd targz %tar cvzf "$f.tar.gz" "$f"
cmd tarbz2 %tar cjvf "$f.tar.bz2" "$f"

# Trash cli bindings
cmd trash ${{
  files=$(printf "$fx" | tr '\n' ';')
  while [ "$files" ]; do
    # extract the substring from start of string up to delimiter.
    # this is the first "element" of the string.
    file=${files%%;*}

    trash-put "$(basename "$file")"
    # if there's only one element left, set `files` to an empty string.
    # this causes us to exit this `while` loop.
    # else, we delete the first "element" of the string from files, and move onto the next.
    if [ "$files" = "$file" ]; then
      files=''
    else
      files="${files#*;}"
    fi
  done
}}

cmd clear_trash %trash-empty

cmd restore_trash ${{
  trash-restore
}}

cmd stripspace %stripspace "$f"

# Bindings
# Remove some defaults
map m
map o
map n
map "'"
map '"'
map d
map c
map e
map f
map y
map = restor

# Not really image preview
map - $~/.config/lf/draw_img "$f"

cmd video_preview ${{
    CACHE=$(mktemp /tmp/thumb_cache.XXXXX)
    ffmpegthumbnailer -i "$f" -o $CACHE -s 0
    ~/.config/lf/draw_img $CACHE && rm $CACHE
}}
map + :video_preview

# File Openers
map ee $$EDITOR "$f"
# map u $view "$f"
map u $$VIEW "$f"

# Archive Mappings
map az zip
map at tar
map ag targz
map ab targz
map au unarchive

# Trash Mappings
map dd trash
map tc clear_trash
map tr restore_trash

# Broot Mapping
# map f broot_jump

# Dragon Mapping
# map dr dragon
# map ds dragon-stay
# map di dragon-individual
# map dm mvdragon
# map dc cpdragon
# map dl dlfile

# map ss stripspace

# Basic Functions
map . set hidden!
map DD delete
map p paste
map x cut
map yy copy
map yl yank-lines
# map <enter> open
map <enter> shell
map mf mkfile
map mr sudomkfile
map md mkdir
map ms mkscript
map ch chmod
map bg setwallpaper
map bb browser
map o open_config
map br $vimv $fx
map r rename
map H top
map L bottom
map R reload
map C clear
map U unselect

# Movement
map gtr cd ~/.local/share/Trash/files
map gvw cd ~/.local/share/nvim/vimwiki
map gt. cd ~/tmp/

map gw cd ~/mda/image/wallpaper
map gi cd ~/mda/image
map gmu cd ~/mda/audio/music/
map gmo cd ~/mda/video/movie/
map gtv cd ~/mda/video/tv/
map gpo cd ~/mda/audio/podcast/
map gv. cd ~/mda/video/
map gm. cd ~/mda
map gtor cd ~/mda/backup/tor

map glb cd ~/.local/bin/
map gd cd ~/download

map gs cd ~/script
map gM cd /mnt

map gr. cd ~/repo
map grm cd ~/repo/dmenu
map grd cd ~/repo/dwm
map grr cd ~/repo/reading-list
map grs cd ~/repo/st

map gc. cd ~/.config
map gcl cd ~/.config/lf/
map gcnv cd ~/.config/nvim/
map gcq cd ~/.config/qutebrowser/
map gl. cd ~/.local
map glb cd ~/.local/bin/
map ge cd /etc
map gu cd /usr
map gUs cd /usr/share
